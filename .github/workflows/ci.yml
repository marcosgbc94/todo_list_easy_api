name: Continuous Integration

on:
  push:
    branches: [ main ] # Se activa cada vez que haces push a la rama 'main'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest # Se ejecuta en un servidor virtual de GitHub con Ubuntu

    steps:
    - name: Checkout del código
      uses: actions/checkout@v3

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Instalar dependencias de Python
      run: pip install -r requirements.txt

    - name: Levantar servicios de prueba con Docker Compose
      run: docker-compose --profile test up -d

    - name: Esperar a que la base de datos de pruebas esté lista
      run: sleep 10 # Una espera simple pero efectiva para entornos de CI

    - name: Ejecutar Pytest dentro del contenedor
      run: docker-compose exec -T backend pytest tests/

  build-and-push:
    runs-on: ubuntu-latest
    needs: test # <-- Este job solo se ejecuta si el job 'test' fue exitoso

    steps:
    - name: Checkout del código
      uses: actions/checkout@v3

    - name: Login a Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Construir y subir la imagen de Docker
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/todolist-api:latest # ej: marcosgbc94/todolist-api:latest